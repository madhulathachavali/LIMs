# Install Nextflow with a single command; https://github.com/nextflow-io/nextflow
curl -fsSL https://get.nextflow.io | bash

Steps to Use the Nextflow Script:
1. Install Nextflow

brew install nextflow


2. Create a Nextflow Workflow
create a directory to store Nextflow script and associated files. 

bash
Copy code
mkdir ~/nextflow_workflow
cd ~/nextflow_workflow

3. Create a Nextflow Script (e.g., main.nf)
Create a file named main.nf in the directory containing your Nextflow process and workflow logic.

Open a text editor (e.g., nano, vim, or any IDE you like) and create the Nextflow script.

bash
Copy code
nano main.nf
Inside main.nf, add your Nextflow process:

groovy
Copy code
#!/usr/bin/env nextflow

process analyzeGeneExpression {

    input:
    path gene_expression_data

    output:
    path "differential_expression_results.csv"

    script:
    """
    # R script for analyzing the gene expression data
    Rscript analyze_expression.R $gene_expression_data
    """
}

workflow {
    // Specify the path to your CSV file on your Mac
    gene_expression_file = "/Users/madhuchavali/Desktop/Gene_expression.csv"

    // Run the process with the provided file
    analyzeGeneExpression(gene_expression_file)
}
4. Create the R Script (e.g., analyze_expression.R)
In the same directory (~/nextflow_workflow), create the R script analyze_expression.R which will be used to analyze the gene expression data.

bash
Copy code
nano analyze_expression.R
Add your R script for differential expression analysis or any other analysis you wish to perform. For example:

r
Copy code
# R script to read gene expression data and perform differential expression analysis

# Load necessary libraries
library(DESeq2)
library(reader)


## data from https://www.ncbi.nlm.nih.gov/geo/download/?acc=GSE283983

********************************************************************
#### steps 
# Install and load necessary packages
install.packages("ggplot2")  # For visualization
BiocManager::install("DESeq2")  # For differential expression analysis
library(DESeq2)
library(ggplot2)

# Load the data
data_file <- "/Users/madhuchavali/Downloads/GSE283983.csv"
count_data <- read.csv(data_file, check.names = FALSE, row.names = NULL)

# Assign row names from 'Feature ID' column and remove 'Feature ID'
rownames(count_data) <- count_data$Feature.ID  # Assuming 'Feature ID' should be row names
count_data <- count_data[, -1]  # Remove 'Feature ID' column

# Create colData (metadata) with sample conditions
col_data <- data.frame(
  condition = factor(c("wild_type", "wild_type", "lin-9", "lin-9", "lin-15b", "lin-15b", "lin-35", "lin-35", "lin-52", "lin-52"))
)

# Check and clean count data (remove non-numeric columns)
count_data_numeric <- count_data[, c("wild type_rep_1", "wild type_rep_2", "lin-9_rep_1", "lin-9_rep_2", "lin-15b_rep_1", "lin-15b_rep_2", "lin-35_rep_1", "lin-35_rep_2", "lin-52_rep_1", "lin-52_rep_2")]

# Check for negative values (DESeq2 does not accept negative counts)
if (any(count_data_numeric < 0)) {
  print("Negative values detected!")
} else {
  print("No negative values.")
}

# Round counts to integers (DESeq2 requires integer counts)
count_data_integer <- round(count_data_numeric)

# Create DESeqDataSet from the cleaned data
dds <- DESeqDataSetFromMatrix(
  countData = count_data_integer,
  colData = col_data,
  design = ~ condition
)

# Summary of DESeqDataSet object
dds


###data source used:https://xenabrowser.net/datapages/?dataset=chin2006_public%2FucsfChinCGH2006_genomicMatrix&host=https%3A%2F%2Fucscpublic.xenahubs.net&removeHub=https%3A%2F%2Fxena.treehouse.gi.ucsc.edu%3A443

